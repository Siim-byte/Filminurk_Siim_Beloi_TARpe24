// <auto-generated />
using System;
using Filminurk.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Filminurk.Data.Migrations
{
    [DbContext(typeof(FilminurkTARpe24Context))]
    [Migration("20251031095852_actors")]
    partial class actors
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Filminurk.Core.Domain.Actors", b =>
                {
                    b.Property<Guid>("ActorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EntryCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EntryModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HomeCountry")
                        .HasColumnType("int");

                    b.Property<string>("HomeRegion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoviesActedFor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortraitID")
                        .HasColumnType("int");

                    b.HasKey("ActorID");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("Filminurk.Core.Domain.FileToApi", b =>
                {
                    b.Property<Guid>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExistingFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsPoster")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MovieID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ImageID");

                    b.ToTable("FilesToApi");
                });

            modelBuilder.Entity("Filminurk.Core.Domain.Movie", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ActorCounter")
                        .HasColumnType("int");

                    b.Property<string>("Actors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AliveCounter")
                        .HasColumnType("int");

                    b.Property<decimal?>("CurrentRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DeadCounter")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EntryModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("FirstPublished")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Filminurk.Core.Domain.UserComment", b =>
                {
                    b.Property<Guid>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CommentDeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CommentModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CommentedScore")
                        .HasColumnType("int");

                    b.Property<string>("CommenterUserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsHarmful")
                        .HasColumnType("int");

                    b.Property<int>("IsHelpful")
                        .HasColumnType("int");

                    b.Property<Guid?>("MovieID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommentID");

                    b.HasIndex("MovieID");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("Filminurk.Core.Domain.UserComment", b =>
                {
                    b.HasOne("Filminurk.Core.Domain.Movie", null)
                        .WithMany("Reviews")
                        .HasForeignKey("MovieID");
                });

            modelBuilder.Entity("Filminurk.Core.Domain.Movie", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
